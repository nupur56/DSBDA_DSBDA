import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Load the dataset
df = sns.load_dataset('iris')

# Display first few rows
print(df.head())

# Features and target
X = df.iloc[:, :-1]  # All columns except last
y = df.iloc[:, -1]   # Last column is the target (Species)

# Split into training and testing (80%-20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Initialize and train model
model = GaussianNB()
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)


# Confusion matrix
cm = confusion_matrix(y_test, y_pred, labels=model.classes_)
print("Confusion Matrix:\n", cm)

# Since this is a multi-class problem, we'll compute overall metrics
accuracy = accuracy_score(y_test, y_pred)
error_rate = 1 - accuracy

# For multi-class: use average='macro' to treat all classes equally
precision = precision_score(y_test, y_pred, average='macro')
recall = recall_score(y_test, y_pred, average='macro')

# Display metrics
print(f"Accuracy: {accuracy:.2f}")
print(f"Error Rate: {error_rate:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")


